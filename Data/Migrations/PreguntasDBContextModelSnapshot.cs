// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(PreguntasDBContext))]
    partial class PreguntasDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dificulty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveGame")
                        .HasColumnType("bit");

                    b.Property<int>("CurrentDificultiyLevel")
                        .HasColumnType("int");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 1,
                            ScoreId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 1,
                            ScoreId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 0,
                            ScoreId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 0,
                            ScoreId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 4,
                            ScoreId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 1,
                            ScoreId = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 0,
                            ScoreId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 2,
                            ScoreId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 0,
                            ScoreId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 3,
                            ScoreId = 10,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            ActiveGame = false,
                            CurrentDificultiyLevel = 2,
                            ScoreId = 11,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Core.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id", "GameId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            Points = 1
                        },
                        new
                        {
                            Id = 2,
                            GameId = 2,
                            Points = 1
                        },
                        new
                        {
                            Id = 3,
                            GameId = 3,
                            Points = 0
                        },
                        new
                        {
                            Id = 4,
                            GameId = 4,
                            Points = 0
                        },
                        new
                        {
                            Id = 5,
                            GameId = 5,
                            Points = 4
                        },
                        new
                        {
                            Id = 6,
                            GameId = 6,
                            Points = 1
                        },
                        new
                        {
                            Id = 7,
                            GameId = 7,
                            Points = 0
                        },
                        new
                        {
                            Id = 8,
                            GameId = 8,
                            Points = 2
                        },
                        new
                        {
                            Id = 9,
                            GameId = 9,
                            Points = 0
                        },
                        new
                        {
                            Id = 10,
                            GameId = 10,
                            Points = 3
                        },
                        new
                        {
                            Id = 11,
                            GameId = 11,
                            Points = 2
                        });
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "bcorrea024"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "anaC001"
                        });
                });

            modelBuilder.Entity("Core.Models.Answer", b =>
                {
                    b.HasOne("Core.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Models.Game", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Models.Score", b =>
                {
                    b.HasOne("Core.Models.Game", "Game")
                        .WithOne("Score")
                        .HasForeignKey("Core.Models.Score", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.Models.Game", b =>
                {
                    b.Navigation("Score");
                });

            modelBuilder.Entity("Core.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
